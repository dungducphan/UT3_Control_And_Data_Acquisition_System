/*----- PROTECTED REGION ID(TANGOCamera.h) ENABLED START -----*/
//=============================================================================
//
// file :        TANGOCamera.h
//
// description : Include file for the TANGOCamera class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TANGOCamera_H
#define TANGOCamera_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	TANGOCamera.h

/**
 *  TANGOCamera class description:
 *    
 */

namespace TANGOCamera_ns
{
enum _acquisitionModeEnum {
	_CONTINUOUS,
	_SINGLEFRAME,
	_MULTIFRAME,
} ;
typedef _acquisitionModeEnum acquisitionModeEnum;

enum _exposureAutoEnum {
	_EXPOSUREAUTOOFF,
	_EXPOSUREAUTOONCE,
	_EXPOSUREAUTOCONTINUOUS,
} ;
typedef _exposureAutoEnum exposureAutoEnum;

enum _exposureModeEnum {
	_TIMED,
	_TRIGGERWIDTH,
} ;
typedef _exposureModeEnum exposureModeEnum;

enum _gainAutoEnum {
	_GAINAUTOOFF,
	_GAINAUTOONCE,
	_GAINAUTOCONTINUOUS,
} ;
typedef _gainAutoEnum gainAutoEnum;

enum _pixelFormatEnum {
	_MONO8,
	_MONO16,
} ;
typedef _pixelFormatEnum pixelFormatEnum;

enum _triggerActivationEnum {
	_LEVELLOW,
	_LEVELHIGH,
	_FALLINGEDGE,
	_RISINGEDGE,
	_ANYEDGE,
} ;
typedef _triggerActivationEnum triggerActivationEnum;

enum _triggerSelectorEnum {
	_ACQUISITIONSTART,
	_FRAMESTART,
	_FRAMEBURSTSTART,
} ;
typedef _triggerSelectorEnum triggerSelectorEnum;

enum _triggerSourceEnum {
	_SOFTWARE,
	_LINE0,
} ;
typedef _triggerSourceEnum triggerSourceEnum;

/*----- PROTECTED REGION ID(TANGOCamera::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Class Declarations

class TANGOCamera : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TANGOCamera::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Data Members

//	Device property data members
public:
	//	ImageMaxWidth:	
	Tango::DevULong64	imageMaxWidth;
	//	ImageMaxHeight:	
	Tango::DevULong64	imageMaxHeight;
	//	DeviceVendorName:	
	string	deviceVendorName;
	//	IPAdress:	
	string	iPAdress;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevULong64	*attr_acquisitionFrameRate_read;
	Tango::DevBoolean	*attr_acquisitionFrameRateEnable_read;
	acquisitionModeEnum	*attr_acquisitionMode_read;
	Tango::DevULong64	*attr_deviceLinkCurrentThroughput_read;
	Tango::DevULong64	*attr_deviceLinkThroughputLimit_read;
	exposureAutoEnum	*attr_exposureAuto_read;
	exposureModeEnum	*attr_exposureMode_read;
	Tango::DevULong64	*attr_exposureTimeInMicroseconds_read;
	Tango::DevULong64	*attr_gain_read;
	gainAutoEnum	*attr_gainAuto_read;
	pixelFormatEnum	*attr_pixelFormat_read;
	triggerActivationEnum	*attr_triggerActivation_read;
	Tango::DevULong64	*attr_triggerDelayInMicroseconds_read;
	triggerSelectorEnum	*attr_triggerSelector_read;
	triggerSourceEnum	*attr_triggerSource_read;
	Tango::DevBoolean	*attr_triggerMode_read;
	Tango::DevULong64	*attr_roi_xmin_read;
	Tango::DevULong64	*attr_roi_xmax_read;
	Tango::DevULong64	*attr_roi_ymin_read;
	Tango::DevULong64	*attr_roi_ymax_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TANGOCamera(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TANGOCamera(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TANGOCamera(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TANGOCamera() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TANGOCamera::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : TANGOCamera::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute acquisitionFrameRate related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_acquisitionFrameRate(Tango::Attribute &attr);
	virtual void write_acquisitionFrameRate(Tango::WAttribute &attr);
	virtual bool is_acquisitionFrameRate_allowed(Tango::AttReqType type);
/**
 *	Attribute acquisitionFrameRateEnable related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_acquisitionFrameRateEnable(Tango::Attribute &attr);
	virtual void write_acquisitionFrameRateEnable(Tango::WAttribute &attr);
	virtual bool is_acquisitionFrameRateEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute acquisitionMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_acquisitionMode(Tango::Attribute &attr);
	virtual void write_acquisitionMode(Tango::WAttribute &attr);
	virtual bool is_acquisitionMode_allowed(Tango::AttReqType type);
/**
 *	Attribute deviceLinkCurrentThroughput related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_deviceLinkCurrentThroughput(Tango::Attribute &attr);
	virtual bool is_deviceLinkCurrentThroughput_allowed(Tango::AttReqType type);
/**
 *	Attribute deviceLinkThroughputLimit related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_deviceLinkThroughputLimit(Tango::Attribute &attr);
	virtual void write_deviceLinkThroughputLimit(Tango::WAttribute &attr);
	virtual bool is_deviceLinkThroughputLimit_allowed(Tango::AttReqType type);
/**
 *	Attribute exposureAuto related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_exposureAuto(Tango::Attribute &attr);
	virtual void write_exposureAuto(Tango::WAttribute &attr);
	virtual bool is_exposureAuto_allowed(Tango::AttReqType type);
/**
 *	Attribute exposureMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_exposureMode(Tango::Attribute &attr);
	virtual void write_exposureMode(Tango::WAttribute &attr);
	virtual bool is_exposureMode_allowed(Tango::AttReqType type);
/**
 *	Attribute exposureTimeInMicroseconds related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_exposureTimeInMicroseconds(Tango::Attribute &attr);
	virtual void write_exposureTimeInMicroseconds(Tango::WAttribute &attr);
	virtual bool is_exposureTimeInMicroseconds_allowed(Tango::AttReqType type);
/**
 *	Attribute gain related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_gain(Tango::Attribute &attr);
	virtual void write_gain(Tango::WAttribute &attr);
	virtual bool is_gain_allowed(Tango::AttReqType type);
/**
 *	Attribute gainAuto related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_gainAuto(Tango::Attribute &attr);
	virtual void write_gainAuto(Tango::WAttribute &attr);
	virtual bool is_gainAuto_allowed(Tango::AttReqType type);
/**
 *	Attribute pixelFormat related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_pixelFormat(Tango::Attribute &attr);
	virtual void write_pixelFormat(Tango::WAttribute &attr);
	virtual bool is_pixelFormat_allowed(Tango::AttReqType type);
/**
 *	Attribute triggerActivation related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_triggerActivation(Tango::Attribute &attr);
	virtual void write_triggerActivation(Tango::WAttribute &attr);
	virtual bool is_triggerActivation_allowed(Tango::AttReqType type);
/**
 *	Attribute triggerDelayInMicroseconds related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_triggerDelayInMicroseconds(Tango::Attribute &attr);
	virtual void write_triggerDelayInMicroseconds(Tango::WAttribute &attr);
	virtual bool is_triggerDelayInMicroseconds_allowed(Tango::AttReqType type);
/**
 *	Attribute triggerSelector related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_triggerSelector(Tango::Attribute &attr);
	virtual void write_triggerSelector(Tango::WAttribute &attr);
	virtual bool is_triggerSelector_allowed(Tango::AttReqType type);
/**
 *	Attribute triggerSource related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_triggerSource(Tango::Attribute &attr);
	virtual void write_triggerSource(Tango::WAttribute &attr);
	virtual bool is_triggerSource_allowed(Tango::AttReqType type);
/**
 *	Attribute triggerMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_triggerMode(Tango::Attribute &attr);
	virtual void write_triggerMode(Tango::WAttribute &attr);
	virtual bool is_triggerMode_allowed(Tango::AttReqType type);
/**
 *	Attribute roi_xmin related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_roi_xmin(Tango::Attribute &attr);
	virtual void write_roi_xmin(Tango::WAttribute &attr);
	virtual bool is_roi_xmin_allowed(Tango::AttReqType type);
/**
 *	Attribute roi_xmax related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_roi_xmax(Tango::Attribute &attr);
	virtual void write_roi_xmax(Tango::WAttribute &attr);
	virtual bool is_roi_xmax_allowed(Tango::AttReqType type);
/**
 *	Attribute roi_ymin related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_roi_ymin(Tango::Attribute &attr);
	virtual void write_roi_ymin(Tango::WAttribute &attr);
	virtual bool is_roi_ymin_allowed(Tango::AttReqType type);
/**
 *	Attribute roi_ymax related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
	virtual void read_roi_ymax(Tango::Attribute &attr);
	virtual void write_roi_ymax(Tango::WAttribute &attr);
	virtual bool is_roi_ymax_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : TANGOCamera::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command StartAcquisition related method
	 *	Description: Start image acquisition
	 *
	 */
	virtual void start_acquisition();
	virtual bool is_StartAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command StopAcquisition related method
	 *	Description: Stop image acquisition
	 *
	 */
	virtual void stop_acquisition();
	virtual bool is_StopAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command ManualTrigger related method
	 *	Description: Reset camera if in FAULT state
	 *
	 */
	virtual void manual_trigger();
	virtual bool is_ManualTrigger_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : TANGOCamera::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TANGOCamera::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TANGOCamera::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Classes Definitions

}	//	End of namespace

#endif   //	TANGOCamera_H
