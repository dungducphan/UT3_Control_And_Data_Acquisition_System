/*----- PROTECTED REGION ID(TANGOCameraClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        TANGOCameraClass.h
//
// description : Include for the TANGOCamera root class.
//               This class is the singleton class for
//                the TANGOCamera device class.
//               It contains all properties and methods which the 
//               TANGOCamera requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TANGOCameraClass_H
#define TANGOCameraClass_H

#include <tango.h>
#include <TANGOCamera.h>


/*----- PROTECTED REGION END -----*/	//	TANGOCameraClass.h


namespace TANGOCamera_ns
{
/*----- PROTECTED REGION ID(TANGOCameraClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	TANGOCameraClass::classes for dynamic creation

//=========================================
//	Define classes for commands
//=========================================
//	Command StartAcquisition class definition
class StartAcquisitionClass : public Tango::Command
{
public:
	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TANGOCamera *>(dev))->is_StartAcquisition_allowed(any);}
};

//	Command StopAcquisition class definition
class StopAcquisitionClass : public Tango::Command
{
public:
	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TANGOCamera *>(dev))->is_StopAcquisition_allowed(any);}
};

//	Command ManualTrigger class definition
class ManualTriggerClass : public Tango::Command
{
public:
	ManualTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ManualTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ManualTriggerClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TANGOCamera *>(dev))->is_ManualTrigger_allowed(any);}
};

//	Command Configure class definition
class ConfigureClass : public Tango::Command
{
public:
	ConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TANGOCamera *>(dev))->is_Configure_allowed(any);}
};


/**
 *	The TANGOCameraClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  TANGOCameraClass : public Tango::DeviceClass
#else
class TANGOCameraClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(TANGOCameraClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	TANGOCameraClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static TANGOCameraClass *init(const char *);
		static TANGOCameraClass *instance();
		~TANGOCameraClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		TANGOCameraClass(string &);
		static TANGOCameraClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	TANGOCamera_H
