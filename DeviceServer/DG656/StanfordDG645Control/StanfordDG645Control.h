/*----- PROTECTED REGION ID(StanfordDG645Control.h) ENABLED START -----*/
//=============================================================================
//
// file :        StanfordDG645Control.h
//
// description : Include file for the StanfordDG645Control class
//
// project :     StanfordDG645Control
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef StanfordDG645Control_H
#define StanfordDG645Control_H

#include <tango.h>
#include "../StanfordDG645Common.h"
#include "../Hooks.h"

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Control.h

/**
 *  StanfordDG645Control class description:
 *    Device server for the Stanford DG645 delay generator. Exports the connection to dedicated single channel device servers.
 */

namespace StanfordDG645Control_ns
{
enum _TriggerModeEnum {
	_INT,
	_EXTRISINGEDGE,
	_EXTFALLINGEDGE,
	_SINGLEEXTRISINGEDGE,
	_SINGLEEXTFALLINGEDGE,
	_SINGLE,
	_LINE,
} ;
typedef _TriggerModeEnum TriggerModeEnum;

/*----- PROTECTED REGION ID(StanfordDG645Control::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Control::Additional Class Declarations

class StanfordDG645Control : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(StanfordDG645Control::Data Members) ENABLED START -----*/

//	Add your own data members
protected:
	static omni_mutex connectionMutex;
	static omni_thread *poll_thread;
	static omni_thread *reconnect_thread;
	string status;
	bool running;
	bool terminated;
	bool connecting;
	char emptyString[1];
	Tango::DevString hardwareInfo;
	Hooks_ns::Hooks *hooks;

public:
	int handle;
	int last_error;

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Control::Data Members

//	Device property data members
public:
	//	Host:	Hostname or IP address to the device.
	string	host;
	//	AutoReconnect:	Whether the server will automatically try to reconnect on errors.
	Tango::DevBoolean	autoReconnect;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	TriggerModeEnum	*attr_TriggerMode_read;
	Tango::DevDouble	*attr_TriggerRate_read;
	Tango::DevFloat	*attr_TriggerThreshold_read;
	Tango::DevDouble	*attr_TriggerHoldoff_read;
	Tango::DevULong	*attr_TriggerPrescale_read;
	Tango::DevBoolean	*attr_BurstMode_read;
	Tango::DevULong	*attr_BurstCount_read;
	Tango::DevDouble	*attr_BurstPeriod_read;
	Tango::DevDouble	*attr_BurstDelay_read;
	Tango::DevString	*attr_DeviceSerialNumber_read;
	Tango::DevString	*attr_DeviceFirmwareVersion_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StanfordDG645Control(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StanfordDG645Control(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	StanfordDG645Control(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~StanfordDG645Control() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : StanfordDG645Control::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : StanfordDG645Control::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute TriggerMode related methods
 *	Description: Int - Internal triggering at rates from 100 µHz to 10 MHz.
 *               ExtRisingEdge - External triggering on rising edges.
 *               ExtFallingEdge - External triggering on falling edges.
 *               SingleExtRisingEdge - Externally triggered single shot on a rising edges. Execute SingleShot command to arm the trigger.
 *               SingleExtFallingEdge - Externally triggered single shot on a falling edges. Execute SingleShot command to arm the trigger.
 *               Single - Single shot triggering. Initiated manually on the device or by executing the SingleShot command.
 *               Line - Trigger at the power line frequency.
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_TriggerMode(Tango::Attribute &attr);
	virtual void write_TriggerMode(Tango::WAttribute &attr);
	virtual bool is_TriggerMode_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerRate related methods
 *	Description: The frequency of the trigger generator used in internal mode. It can generate triggers at rates from 100 uHz to 10 MHz with 1 uHz resolution.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_TriggerRate(Tango::Attribute &attr);
	virtual void write_TriggerRate(Tango::WAttribute &attr);
	virtual bool is_TriggerRate_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerThreshold related methods
 *	Description: The Ext Trig input threshold range is +-3.5 VDC.
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_TriggerThreshold(Tango::Attribute &attr);
	virtual void write_TriggerThreshold(Tango::WAttribute &attr);
	virtual bool is_TriggerThreshold_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerHoldoff related methods
 *	Description: The minimum allowed time between successive triggers. For example, if the trigger holdoff is set to 10 ms, then successive triggers will be ignored until at least 10 ms have passed since the last accepted trigger. Makes use of the advanced triggering mode.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_TriggerHoldoff(Tango::Attribute &attr);
	virtual void write_TriggerHoldoff(Tango::WAttribute &attr);
	virtual bool is_TriggerHoldoff_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerPrescale related methods
 *	Description: This is a divider to the original trigger frequency. If set to values > 1, only every Nth trigger will initiate a delay cyle. The valid range covers [1..2^30-1], 1 will disable the feature. Makes use of  the advanced triggering mode when.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_TriggerPrescale(Tango::Attribute &attr);
	virtual void write_TriggerPrescale(Tango::WAttribute &attr);
	virtual bool is_TriggerPrescale_allowed(Tango::AttReqType type);
/**
 *	Attribute BurstMode related methods
 *	Description: The delay generator will generate a burst of N delay cycles on each trigger when enabled.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_BurstMode(Tango::Attribute &attr);
	virtual void write_BurstMode(Tango::WAttribute &attr);
	virtual bool is_BurstMode_allowed(Tango::AttReqType type);
/**
 *	Attribute BurstCount related methods
 *	Description: The number of delay cyles generated on each trigger when in burst mode. The valid range covers [1..2^32-1].
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_BurstCount(Tango::Attribute &attr);
	virtual void write_BurstCount(Tango::WAttribute &attr);
	virtual bool is_BurstCount_allowed(Tango::AttReqType type);
/**
 *	Attribute BurstPeriod related methods
 *	Description: The period between delay cycles when in burst mode.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_BurstPeriod(Tango::Attribute &attr);
	virtual void write_BurstPeriod(Tango::WAttribute &attr);
	virtual bool is_BurstPeriod_allowed(Tango::AttReqType type);
/**
 *	Attribute BurstDelay related methods
 *	Description: The added insertion delay from the trigger to the first delay cycle when in burst mode.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_BurstDelay(Tango::Attribute &attr);
	virtual void write_BurstDelay(Tango::WAttribute &attr);
	virtual bool is_BurstDelay_allowed(Tango::AttReqType type);
/**
 *	Attribute DeviceSerialNumber related methods
 *	Description: Serial number of the delay generator.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_DeviceSerialNumber(Tango::Attribute &attr);
	virtual bool is_DeviceSerialNumber_allowed(Tango::AttReqType type);
/**
 *	Attribute DeviceFirmwareVersion related methods
 *	Description: Firmware version of the delay generator.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_DeviceFirmwareVersion(Tango::Attribute &attr);
	virtual bool is_DeviceFirmwareVersion_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : StanfordDG645Control::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command SingleShot related method
	 *	Description: When the DG645 is configured for single shot triggers, this command initiates a single trigger. When it is configured for externally triggered single shots, this command arms the DG645 to trigger on the next detected external trigger.
	 *
	 */
	virtual void single_shot();
	virtual bool is_SingleShot_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadDefaults related method
	 *	Description: Resets the device to it`s default settings.
	 *
	 */
	virtual void load_defaults();
	virtual bool is_LoadDefaults_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadSettings related method
	 *	Description: Reads back the previously saved instrument settings from location [1..9].
	 *
	 *	@param argin 
	 */
	virtual void load_settings(Tango::DevUShort argin);
	virtual bool is_LoadSettings_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveSettings related method
	 *	Description: Saves the current instrument settings to location [1..9].
	 *
	 *	@param argin 
	 */
	virtual void save_settings(Tango::DevUShort argin);
	virtual bool is_SaveSettings_allowed(const CORBA::Any &any);
	/**
	 *	Command WriteRead related method
	 *	Description: Writes the argument string to the delay generator and returns the answer.
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevString write_read(Tango::DevString argin);
	virtual bool is_WriteRead_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : StanfordDG645Control::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(StanfordDG645Control::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	void reconnect(bool force = false);
	static void *init_connection(void *arg);
	static void *poll_state(void *arg);
	int send_cmd(char *cmd, Tango::DevString *answer = NULL);
	int get_reason(const CORBA::Exception &e);
	const char *error_msg(int code);
	void error(int code, const char *module, const char *msg, const char *origin, bool throw_exception = true, bool set_status_string = true);
	int nsleep(long nsec);
	void flush_socket(int handle=-1);

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Control::Additional Method prototypes
};

/*----- PROTECTED REGION ID(StanfordDG645Control::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Control::Additional Classes Definitions

}	//	End of namespace

#endif   //	StanfordDG645Control_H
