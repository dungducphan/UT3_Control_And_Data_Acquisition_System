/*----- PROTECTED REGION ID(StanfordDG645ControlClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        StanfordDG645ControlClass.h
//
// description : Include for the StanfordDG645Control root class.
//               This class is the singleton class for
//                the StanfordDG645Control device class.
//               It contains all properties and methods which the 
//               StanfordDG645Control requires only once e.g. the commands.
//
// project :     StanfordDG645Control
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef StanfordDG645ControlClass_H
#define StanfordDG645ControlClass_H

#include <tango.h>
#include <StanfordDG645Control.h>


/*----- PROTECTED REGION END -----*/	//	StanfordDG645ControlClass.h


namespace StanfordDG645Control_ns
{
/*----- PROTECTED REGION ID(StanfordDG645ControlClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	StanfordDG645ControlClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute TriggerMode class definition
class TriggerModeAttrib: public Tango::Attr
{
public:
	TriggerModeAttrib():Attr("TriggerMode",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~TriggerModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_TriggerMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_TriggerMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_TriggerMode_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(TriggerModeEnum) == in_type;}
	virtual string get_enum_type() {return string("TriggerModeEnum");}
};

//	Attribute TriggerRate class definition
class TriggerRateAttrib: public Tango::Attr
{
public:
	TriggerRateAttrib():Attr("TriggerRate",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~TriggerRateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_TriggerRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_TriggerRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_TriggerRate_allowed(ty);}
};

//	Attribute TriggerThreshold class definition
class TriggerThresholdAttrib: public Tango::Attr
{
public:
	TriggerThresholdAttrib():Attr("TriggerThreshold",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~TriggerThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_TriggerThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_TriggerThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_TriggerThreshold_allowed(ty);}
};

//	Attribute TriggerHoldoff class definition
class TriggerHoldoffAttrib: public Tango::Attr
{
public:
	TriggerHoldoffAttrib():Attr("TriggerHoldoff",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~TriggerHoldoffAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_TriggerHoldoff(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_TriggerHoldoff(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_TriggerHoldoff_allowed(ty);}
};

//	Attribute TriggerPrescale class definition
class TriggerPrescaleAttrib: public Tango::Attr
{
public:
	TriggerPrescaleAttrib():Attr("TriggerPrescale",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~TriggerPrescaleAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_TriggerPrescale(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_TriggerPrescale(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_TriggerPrescale_allowed(ty);}
};

//	Attribute BurstMode class definition
class BurstModeAttrib: public Tango::Attr
{
public:
	BurstModeAttrib():Attr("BurstMode",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~BurstModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_BurstMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_BurstMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_BurstMode_allowed(ty);}
};

//	Attribute BurstCount class definition
class BurstCountAttrib: public Tango::Attr
{
public:
	BurstCountAttrib():Attr("BurstCount",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~BurstCountAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_BurstCount(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_BurstCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_BurstCount_allowed(ty);}
};

//	Attribute BurstPeriod class definition
class BurstPeriodAttrib: public Tango::Attr
{
public:
	BurstPeriodAttrib():Attr("BurstPeriod",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~BurstPeriodAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_BurstPeriod(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_BurstPeriod(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_BurstPeriod_allowed(ty);}
};

//	Attribute BurstDelay class definition
class BurstDelayAttrib: public Tango::Attr
{
public:
	BurstDelayAttrib():Attr("BurstDelay",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~BurstDelayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_BurstDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->write_BurstDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_BurstDelay_allowed(ty);}
};

//	Attribute DeviceSerialNumber class definition
class DeviceSerialNumberAttrib: public Tango::Attr
{
public:
	DeviceSerialNumberAttrib():Attr("DeviceSerialNumber",
			Tango::DEV_STRING, Tango::READ) {};
	~DeviceSerialNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_DeviceSerialNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_DeviceSerialNumber_allowed(ty);}
};

//	Attribute DeviceFirmwareVersion class definition
class DeviceFirmwareVersionAttrib: public Tango::Attr
{
public:
	DeviceFirmwareVersionAttrib():Attr("DeviceFirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~DeviceFirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<StanfordDG645Control *>(dev))->read_DeviceFirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<StanfordDG645Control *>(dev))->is_DeviceFirmwareVersion_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SingleShot class definition
class SingleShotClass : public Tango::Command
{
public:
	SingleShotClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SingleShotClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SingleShotClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<StanfordDG645Control *>(dev))->is_SingleShot_allowed(any);}
};

//	Command LoadDefaults class definition
class LoadDefaultsClass : public Tango::Command
{
public:
	LoadDefaultsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadDefaultsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadDefaultsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<StanfordDG645Control *>(dev))->is_LoadDefaults_allowed(any);}
};

//	Command LoadSettings class definition
class LoadSettingsClass : public Tango::Command
{
public:
	LoadSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadSettingsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<StanfordDG645Control *>(dev))->is_LoadSettings_allowed(any);}
};

//	Command SaveSettings class definition
class SaveSettingsClass : public Tango::Command
{
public:
	SaveSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveSettingsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<StanfordDG645Control *>(dev))->is_SaveSettings_allowed(any);}
};

//	Command WriteRead class definition
class WriteReadClass : public Tango::Command
{
public:
	WriteReadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteReadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteReadClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<StanfordDG645Control *>(dev))->is_WriteRead_allowed(any);}
};


/**
 *	The StanfordDG645ControlClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  StanfordDG645ControlClass : public Tango::DeviceClass
#else
class StanfordDG645ControlClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(StanfordDG645ControlClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	StanfordDG645ControlClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static StanfordDG645ControlClass *init(const char *);
		static StanfordDG645ControlClass *instance();
		~StanfordDG645ControlClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		StanfordDG645ControlClass(string &);
		static StanfordDG645ControlClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	StanfordDG645Control_H
