/*----- PROTECTED REGION ID(StanfordDG645Channel.h) ENABLED START -----*/
//=============================================================================
//
// file :        StanfordDG645Channel.h
//
// description : Include file for the StanfordDG645Channel class
//
// project :     StanfordDG645Channel
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef StanfordDG645Channel_H
#define StanfordDG645Channel_H

#include <tango.h>
#include "../StanfordDG645Common.h"
#include "../StanfordDG645Control/StanfordDG645Control.h"
#include "../Hooks.h"

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Channel.h

/**
 *  StanfordDG645Channel class description:
 *    Device server for a single delay channel.
 */

namespace StanfordDG645Channel_ns
{
/*----- PROTECTED REGION ID(StanfordDG645Channel::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Channel::Additional Class Declarations

class StanfordDG645Channel : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(StanfordDG645Channel::Data Members) ENABLED START -----*/

//	Add your own data members
protected:
	string status;
	Hooks_ns::Hooks *hooks;

public:
	StanfordDG645Control_ns::StanfordDG645Control *controller;

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Channel::Data Members

//	Device property data members
public:
	//	ControlDevicePath:	Path to the StanfordDG645Control device providing the connection.
	string	controlDevicePath;
	//	Channel:	Channel number from 0-4 to be controlled by this device. They are mapped as follows: 0 - t0, 1 - AB, 2 - CD, 3 - EF, 4 - GH.
	Tango::DevUShort	channel;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevFloat	*attr_OutputAmplitude_read;
	Tango::DevFloat	*attr_OutputOffset_read;
	Tango::DevDouble	*attr_OutputWidth_read;
	Tango::DevDouble	*attr_TriggerDelay_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StanfordDG645Channel(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StanfordDG645Channel(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	StanfordDG645Channel(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~StanfordDG645Channel() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : StanfordDG645Channel::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : StanfordDG645Channel::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute OutputAmplitude related methods
 *	Description: The amplitude for the output. It might be positive or negative and has to be in the range between 0.5V and 5V. The absolute level may not exceed 6V.
 *               
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_OutputAmplitude(Tango::Attribute &attr);
	virtual void write_OutputAmplitude(Tango::WAttribute &attr);
	virtual bool is_OutputAmplitude_allowed(Tango::AttReqType type);
/**
 *	Attribute OutputOffset related methods
 *	Description: The DC offset for the output. It has to be in the range between -2V and 2V. The absolute level may not exceed 6V.
 *               
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_OutputOffset(Tango::Attribute &attr);
	virtual void write_OutputOffset(Tango::WAttribute &attr);
	virtual bool is_OutputOffset_allowed(Tango::AttReqType type);
/**
 *	Attribute OutputWidth related methods
 *	Description: The pulse width for the output.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_OutputWidth(Tango::Attribute &attr);
	virtual void write_OutputWidth(Tango::WAttribute &attr);
	virtual bool is_OutputWidth_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerDelay related methods
 *	Description: The delay between t0 and the trigger of the channel.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_TriggerDelay(Tango::Attribute &attr);
	virtual void write_TriggerDelay(Tango::WAttribute &attr);
	virtual bool is_TriggerDelay_allowed(Tango::AttReqType type);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute TriggerPrescale related methods
	 *	Description: This is a divider to the original delay cyle frequency. If set to values > 1, only every Nth delay cyle will trigger the output. The valid range covers [1..2^30-1], 1 will disable the feature. Makes use of the advanced triggering mode.
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar
	 */
	virtual void read_TriggerPrescale(Tango::Attribute &attr);
	virtual void write_TriggerPrescale(Tango::WAttribute &attr);
	virtual bool is_TriggerPrescale_allowed(Tango::AttReqType type);
	void add_TriggerPrescale_dynamic_attribute(string attname);
	void remove_TriggerPrescale_dynamic_attribute(string attname);
	Tango::DevULong *get_TriggerPrescale_data_ptr(string &name);
	map<string,Tango::DevULong>	   TriggerPrescale_data;

	/**
	 *	Attribute TriggerPhase related methods
	 *	Description: This determines the phase at which the associated output is enabled. The output is enabled when the prescaler counter equals the phase factor.
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar
	 */
	virtual void read_TriggerPhase(Tango::Attribute &attr);
	virtual void write_TriggerPhase(Tango::WAttribute &attr);
	virtual bool is_TriggerPhase_allowed(Tango::AttReqType type);
	void add_TriggerPhase_dynamic_attribute(string attname);
	void remove_TriggerPhase_dynamic_attribute(string attname);
	Tango::DevULong *get_TriggerPhase_data_ptr(string &name);
	map<string,Tango::DevULong>	   TriggerPhase_data;

	/**
	 *	Attribute BurstMode related methods
	 *	Description: If true, the T0 output is enabled for all delay cycles of the burst. Otherwise it is enabled for first delay cycle of the burst only.
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar
	 */
	virtual void read_BurstMode(Tango::Attribute &attr);
	virtual void write_BurstMode(Tango::WAttribute &attr);
	virtual bool is_BurstMode_allowed(Tango::AttReqType type);
	void add_BurstMode_dynamic_attribute(string attname);
	void remove_BurstMode_dynamic_attribute(string attname);
	Tango::DevBoolean *get_BurstMode_data_ptr(string &name);
	map<string,Tango::DevBoolean>	   BurstMode_data;

	//--------------------------------------------------------
	/**
	 *	Method      : StanfordDG645Channel::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : StanfordDG645Channel::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(StanfordDG645Channel::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	static void connect_controller(void *arg);
	static void disconnect_controller(void *arg);
	static void set_connection_state(void *arg);
	int get_reason(const CORBA::Exception &e);
	const char *error_msg(int code);
	void error(int code, const char *module, const char *msg, const char *origin, bool throw_exception = true, bool set_status_string = true);
	int nsleep(long nsec);

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Channel::Additional Method prototypes
};

/*----- PROTECTED REGION ID(StanfordDG645Channel::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	StanfordDG645Channel::Additional Classes Definitions

}	//	End of namespace

#endif   //	StanfordDG645Channel_H
