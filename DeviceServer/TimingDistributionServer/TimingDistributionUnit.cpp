/*----- PROTECTED REGION ID(TimingDistributionUnit.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TimingDistributionUnit.cpp
//
// description : C++ source for the TimingDistributionUnit class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TimingDistributionUnit are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TimingDistributionUnit.h>
#include <TimingDistributionUnitClass.h>

#include <fcntl.h>   // Contains file controls like O_RDWR
#include <cerrno>    // Error integer and strerror() function
#include <termios.h> // Contains POSIX terminal control definitions
#include <unistd.h>  // write(), read(), close()

/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit.cpp

/**
 *  TimingDistributionUnit class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  Timestamp  |  Tango::DevULong64	Scalar
//================================================================

namespace TimingDistributionUnit_ns
{
/*----- PROTECTED REGION ID(TimingDistributionUnit::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::TimingDistributionUnit()
 *	Description : Constructors for a Tango device
 *                implementing the classTimingDistributionUnit
 */
//--------------------------------------------------------
TimingDistributionUnit::TimingDistributionUnit(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TimingDistributionUnit::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::constructor_1
}
//--------------------------------------------------------
TimingDistributionUnit::TimingDistributionUnit(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TimingDistributionUnit::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::constructor_2
}
//--------------------------------------------------------
TimingDistributionUnit::TimingDistributionUnit(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TimingDistributionUnit::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TimingDistributionUnit::delete_device()
{
	DEBUG_STREAM << "TimingDistributionUnit::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingDistributionUnit::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
    ::close(SerialPort);
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::delete_device
	delete[] attr_Timestamp_read;
}

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TimingDistributionUnit::init_device()
{
	DEBUG_STREAM << "TimingDistributionUnit::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingDistributionUnit::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::init_device_before
	
	//	No device property to be read from database
	
	attr_Timestamp_read = new Tango::DevULong64[1];
	/*----- PROTECTED REGION ID(TimingDistributionUnit::init_device) ENABLED START -----*/
	
	//	Initialize device
    OpenUART();
    EventListenerThread = new std::thread(&TimingDistributionUnit_ns::TimingDistributionUnit::ListenToEvent, this);
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::init_device
}


//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TimingDistributionUnit::always_executed_hook()
{
	DEBUG_STREAM << "TimingDistributionUnit::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingDistributionUnit::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TimingDistributionUnit::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TimingDistributionUnit::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingDistributionUnit::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Timestamp related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingDistributionUnit::read_Timestamp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimingDistributionUnit::read_Timestamp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingDistributionUnit::read_Timestamp) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Timestamp_read);
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::read_Timestamp
}

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimingDistributionUnit::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TimingDistributionUnit::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TimingDistributionUnit::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimingDistributionUnit::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TimingDistributionUnit::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TimingDistributionUnit::namespace_ending) ENABLED START -----*/

//	Additional Methods


    void TimingDistributionUnit::OpenUART() {
        // Open the serial port connected to the TM4C12x
        // Change device path as needed (currently set to a standard FTDI USB-UART cable type device)
        SerialPort = open("/dev/ttyACM0", O_RDWR);

        // Create new termios struct, we call it 'tty' for convention
        struct termios tty{};

        // Read in existing UI_settings, and handle any error
        if (tcgetattr(SerialPort, &tty) != 0) {
            printf("Error %i from tcgetattr: %s\n", errno, strerror(errno));
            return;
        }

        tty.c_cflag &= ~PARENB;               // Clear parity bit, disabling parity (most common)
        tty.c_cflag &= ~CSTOPB;               // Clear stop field, only one stop bit used in communication (most common)
        tty.c_cflag &= ~CSIZE;                // Clear all bits that set the data size
        tty.c_cflag |= CS8;                   // 8 bits per byte (most common)
        tty.c_cflag &= ~CRTSCTS;              // Disable RTS/CTS hardware flow control (most common)
        tty.c_cflag |= CREAD | CLOCAL;        // Turn on READ & ignore ctrl lines (CLOCAL = 1)
        tty.c_lflag &= ~ICANON;
        tty.c_lflag &= ~ECHO;                 // Disable echo
        tty.c_lflag &= ~ECHOE;                // Disable erasure
        tty.c_lflag &= ~ECHONL;               // Disable new-line echo
        tty.c_lflag &= ~ISIG;                 // Disable interpretation of INTR, QUIT and SUSP
        tty.c_iflag &= ~(IXON | IXOFF
                         | IXANY);       // Turn off s/w flow ctrl
        tty.c_iflag &= ~(IGNBRK | BRKINT
                         | PARMRK | ISTRIP
                         | INLCR  | IGNCR
                         | ICRNL);              // Disable any special handling of received bytes
        tty.c_oflag &= ~OPOST;                // Prevent special interpretation of output bytes (e.g. newline chars)
        tty.c_oflag &= ~ONLCR;                // Prevent conversion of newline to carriage return/line feed
        tty.c_cc[VTIME] = 1;                  // Wait for up to 1s (10 deciseconds), returning as soon as data is received
        tty.c_cc[VMIN] = 100;

        // Set in/out baud rate to be 115200
        cfsetispeed(&tty, B115200);
        cfsetospeed(&tty, B115200);

        // Save tty UI_settings, also checking for error
        if (tcsetattr(SerialPort, TCSANOW, &tty) != 0) return;
    }

    void TimingDistributionUnit::ListenToEvent() {
        char read_buf[1];
        while (true) {
            read(SerialPort, &read_buf, sizeof(read_buf));
            if (read_buf[0] == 'T') {
                auto now = std::chrono::system_clock::now();
                *attr_Timestamp_read = (Tango::DevULong64) std::chrono::duration_cast<std::chrono::microseconds>(
                        now.time_since_epoch()).count();
                push_change_event("Timestamp", attr_Timestamp_read, 1);
            }
        }
    }

/*----- PROTECTED REGION END -----*/	//	TimingDistributionUnit::namespace_ending
} //	namespace
