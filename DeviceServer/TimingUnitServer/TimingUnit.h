/*----- PROTECTED REGION ID(TimingUnit.h) ENABLED START -----*/
//=============================================================================
//
// file :        TimingUnit.h
//
// description : Include file for the TimingUnit class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TimingUnit_H
#define TimingUnit_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	TimingUnit.h

/**
 *  TimingUnit class description:
 *    
 */

namespace TimingUnit_ns
{


/*----- PROTECTED REGION ID(TimingUnit::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

    enum _Output_Port_Enum {
        _DELAYLINE0,
        _DELAYLINE1,
        _DELAYLINE2,
        _DELAYLINE3,
        _DELAYLINE4,
        _DELAYLINE5,
    } ;
    typedef _Output_Port_Enum Output_B0Enum;
    typedef _Output_Port_Enum Output_B1Enum;
    typedef _Output_Port_Enum Output_B2Enum;
    typedef _Output_Port_Enum Output_B3Enum;
    typedef _Output_Port_Enum Output_B4Enum;
    typedef _Output_Port_Enum Output_B5Enum;
    typedef _Output_Port_Enum Output_B6Enum;
    typedef _Output_Port_Enum Output_B7Enum;
    typedef _Output_Port_Enum Output_D0Enum;
    typedef _Output_Port_Enum Output_D1Enum;
    typedef _Output_Port_Enum Output_D2Enum;
    typedef _Output_Port_Enum Output_D3Enum;

/*----- PROTECTED REGION END -----*/	//	TimingUnit::Additional Class Declarations

class TimingUnit : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TimingUnit::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	TimingUnit::Data Members


//	Attribute data members
public:
	Tango::DevUShort	*attr_DelayLine0_read;
	Tango::DevUShort	*attr_DelayLine1_read;
	Tango::DevUShort	*attr_DelayLine2_read;
	Tango::DevUShort	*attr_DelayLine3_read;
	Tango::DevUShort	*attr_DelayLine4_read;
	Tango::DevUShort	*attr_DelayLine5_read;
	Output_B0Enum	*attr_Output_B0_read;
	Output_B1Enum	*attr_Output_B1_read;
	Output_B2Enum	*attr_Output_B2_read;
	Output_B3Enum	*attr_Output_B3_read;
	Output_B4Enum	*attr_Output_B4_read;
	Output_B5Enum	*attr_Output_B5_read;
	Output_B6Enum	*attr_Output_B6_read;
	Output_B7Enum	*attr_Output_B7_read;
	Output_D0Enum	*attr_Output_D0_read;
	Output_D1Enum	*attr_Output_D1_read;
	Output_D2Enum	*attr_Output_D2_read;
	Output_D3Enum	*attr_Output_D3_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TimingUnit(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TimingUnit(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TimingUnit(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TimingUnit() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TimingUnit::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : TimingUnit::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute DelayLine0 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine0(Tango::Attribute &attr);
	virtual void write_DelayLine0(Tango::WAttribute &attr);
	virtual bool is_DelayLine0_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayLine1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine1(Tango::Attribute &attr);
	virtual void write_DelayLine1(Tango::WAttribute &attr);
	virtual bool is_DelayLine1_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayLine2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine2(Tango::Attribute &attr);
	virtual void write_DelayLine2(Tango::WAttribute &attr);
	virtual bool is_DelayLine2_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayLine3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine3(Tango::Attribute &attr);
	virtual void write_DelayLine3(Tango::WAttribute &attr);
	virtual bool is_DelayLine3_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayLine4 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine4(Tango::Attribute &attr);
	virtual void write_DelayLine4(Tango::WAttribute &attr);
	virtual bool is_DelayLine4_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayLine5 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DelayLine5(Tango::Attribute &attr);
	virtual void write_DelayLine5(Tango::WAttribute &attr);
	virtual bool is_DelayLine5_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B0 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B0(Tango::Attribute &attr);
	virtual void write_Output_B0(Tango::WAttribute &attr);
	virtual bool is_Output_B0_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B1(Tango::Attribute &attr);
	virtual void write_Output_B1(Tango::WAttribute &attr);
	virtual bool is_Output_B1_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B2(Tango::Attribute &attr);
	virtual void write_Output_B2(Tango::WAttribute &attr);
	virtual bool is_Output_B2_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B3(Tango::Attribute &attr);
	virtual void write_Output_B3(Tango::WAttribute &attr);
	virtual bool is_Output_B3_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B4 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B4(Tango::Attribute &attr);
	virtual void write_Output_B4(Tango::WAttribute &attr);
	virtual bool is_Output_B4_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B5 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B5(Tango::Attribute &attr);
	virtual void write_Output_B5(Tango::WAttribute &attr);
	virtual bool is_Output_B5_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B6 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B6(Tango::Attribute &attr);
	virtual void write_Output_B6(Tango::WAttribute &attr);
	virtual bool is_Output_B6_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_B7 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_B7(Tango::Attribute &attr);
	virtual void write_Output_B7(Tango::WAttribute &attr);
	virtual bool is_Output_B7_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_D0 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_D0(Tango::Attribute &attr);
	virtual void write_Output_D0(Tango::WAttribute &attr);
	virtual bool is_Output_D0_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_D1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_D1(Tango::Attribute &attr);
	virtual void write_Output_D1(Tango::WAttribute &attr);
	virtual bool is_Output_D1_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_D2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_D2(Tango::Attribute &attr);
	virtual void write_Output_D2(Tango::WAttribute &attr);
	virtual bool is_Output_D2_allowed(Tango::AttReqType type);
/**
 *	Attribute Output_D3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_Output_D3(Tango::Attribute &attr);
	virtual void write_Output_D3(Tango::WAttribute &attr);
	virtual bool is_Output_D3_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : TimingUnit::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : TimingUnit::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TimingUnit::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TimingUnit::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TimingUnit::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	TimingUnit::Additional Classes Definitions

}	//	End of namespace

#endif   //	TimingUnit_H
