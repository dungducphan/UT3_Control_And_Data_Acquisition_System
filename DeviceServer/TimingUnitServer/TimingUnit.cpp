/*----- PROTECTED REGION ID(TimingUnit.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TimingUnit.cpp
//
// description : C++ source for the TimingUnit class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TimingUnit are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TimingUnit.h>
#include <TimingUnitClass.h>

/*----- PROTECTED REGION END -----*/	//	TimingUnit.cpp

/**
 *  TimingUnit class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Start         |  start
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  DelayPortB              |  Tango::DevLong	Scalar
//  DelayPortD              |  Tango::DevLong	Scalar
//  ShotID                  |  Tango::DevULong64	Scalar
//  LastLaserShotTimestamp  |  Tango::DevLong64	Scalar
//================================================================

namespace TimingUnit_ns
{
/*----- PROTECTED REGION ID(TimingUnit::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TimingUnit::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::TimingUnit()
 *	Description : Constructors for a Tango device
 *                implementing the classTimingUnit
 */
//--------------------------------------------------------
TimingUnit::TimingUnit(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TimingUnit::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::constructor_1
}
//--------------------------------------------------------
TimingUnit::TimingUnit(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TimingUnit::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::constructor_2
}
//--------------------------------------------------------
TimingUnit::TimingUnit(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TimingUnit::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TimingUnit::delete_device()
{
	DEBUG_STREAM << "TimingUnit::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingUnit::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
    timingDriverPtr->~TimingUnitDriver();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::delete_device
	delete[] attr_DelayPortB_read;
	delete[] attr_DelayPortD_read;
	delete[] attr_ShotID_read;
	delete[] attr_LastLaserShotTimestamp_read;
}

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TimingUnit::init_device()
{
	DEBUG_STREAM << "TimingUnit::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingUnit::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	TimingUnit::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_DelayPortB_read = new Tango::DevLong[1];
	attr_DelayPortD_read = new Tango::DevLong[1];
	attr_ShotID_read = new Tango::DevULong64[1];
	attr_LastLaserShotTimestamp_read = new Tango::DevLong64[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(TimingUnit::init_device) ENABLED START -----*/
	
	//	Initialize device
    *attr_ShotID_read = 0;
    *attr_LastLaserShotTimestamp_read = 0;
    timingDriverPtr = std::make_unique<TimingUnitDriver>(this);
    usleep(500);
    timingDriverPtr->Stop();
    sleep(2);
    std::cout << "Timing/Trigger Unit ready!" << std::endl;
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TimingUnit::get_device_property()
{
	/*----- PROTECTED REGION ID(TimingUnit::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("serialPort"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TimingUnitClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TimingUnitClass	*ds_class =
			(static_cast<TimingUnitClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize serialPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialPort;
		else {
			//	Try to initialize serialPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialPort;
		}
		//	And try to extract serialPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialPort;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

	}

	/*----- PROTECTED REGION ID(TimingUnit::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : TimingUnit::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void TimingUnit::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		append_status(tms.str());
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(TimingUnit::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	TimingUnit::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : TimingUnit::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TimingUnit::always_executed_hook()
{
	DEBUG_STREAM << "TimingUnit::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					get_status().c_str(),
					(const char *)"TimingUnit::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(TimingUnit::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TimingUnit::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TimingUnit::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
    timingDriverPtr->GetDelayFromHardware();
#ifdef ENABLE_DEBUG_FEATURES
    std::cout << "Read DelayPortB: " << *attr_DelayPortB_read << std::endl;
    std::cout << "Read DelayPortD: " << *attr_DelayPortD_read << std::endl;
#endif
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TimingUnit::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void TimingUnit::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TimingUnit::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
#ifdef ENABLE_DEBUG_FEATURES
    std::cout << "Write DelayPortB: " << *attr_DelayPortB_read << std::endl;
    std::cout << "Write DelayPortD: " << *attr_DelayPortB_read << std::endl;
#endif
    timingDriverPtr->SetDelayToHardware();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute DelayPortB related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::read_DelayPortB(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimingUnit::read_DelayPortB(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::read_DelayPortB) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_DelayPortB_read);
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::read_DelayPortB
}
//--------------------------------------------------------
/**
 *	Write attribute DelayPortB related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::write_DelayPortB(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TimingUnit::write_DelayPortB(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TimingUnit::write_DelayPortB) ENABLED START -----*/
	*attr_DelayPortB_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::write_DelayPortB
}
//--------------------------------------------------------
/**
 *	Read attribute DelayPortD related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::read_DelayPortD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimingUnit::read_DelayPortD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::read_DelayPortD) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_DelayPortD_read);
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::read_DelayPortD
}
//--------------------------------------------------------
/**
 *	Write attribute DelayPortD related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::write_DelayPortD(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TimingUnit::write_DelayPortD(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TimingUnit::write_DelayPortD) ENABLED START -----*/
    *attr_DelayPortD_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::write_DelayPortD
}
//--------------------------------------------------------
/**
 *	Read attribute ShotID related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::read_ShotID(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimingUnit::read_ShotID(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::read_ShotID) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ShotID_read);
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::read_ShotID
}
//--------------------------------------------------------
/**
 *	Read attribute LastLaserShotTimestamp related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimingUnit::read_LastLaserShotTimestamp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimingUnit::read_LastLaserShotTimestamp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimingUnit::read_LastLaserShotTimestamp) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_LastLaserShotTimestamp_read);
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::read_LastLaserShotTimestamp
}

//--------------------------------------------------------
/**
 *	Method      : TimingUnit::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimingUnit::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TimingUnit::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Start related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TimingUnit::start()
{
	DEBUG_STREAM << "TimingUnit::Start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingUnit::start) ENABLED START -----*/
	
	//	Add your own code
    timingDriverPtr->Start();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::start
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TimingUnit::stop()
{
	DEBUG_STREAM << "TimingUnit::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TimingUnit::stop) ENABLED START -----*/
	
	//	Add your own code
    timingDriverPtr->Stop();
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::stop
}
//--------------------------------------------------------
/**
 *	Method      : TimingUnit::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimingUnit::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TimingUnit::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TimingUnit::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TimingUnit::namespace_ending) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	TimingUnit::namespace_ending
} //	namespace
