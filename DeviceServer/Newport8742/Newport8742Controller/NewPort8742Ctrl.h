/*----- PROTECTED REGION ID(NewPort8742Ctrl.h) ENABLED START -----*/
//=============================================================================
//
// file :        NewPort8742Ctrl.h
//
// description : Include for the NewPort8742Ctrl class.
//
// project :     NewPort8742Ctrl.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef NEWPORT8742CTRL_H
#define NEWPORT8742CTRL_H


#include <tango.h>
#include <newport8742.h>

/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl.h

/**
 *  NewPort8742Ctrl class description:
 *    Controller class for NewPort8742 piezo controller
 */

namespace NewPort8742Ctrl_ns
{
/*----- PROTECTED REGION ID(NewPort8742Ctrl::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::Additional Class Declarations

class NewPort8742Ctrl : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(NewPort8742Ctrl::Data Members) ENABLED START -----*/

	//		Add your own data members
	private:
		NewPort8742* ctrl;
		Tango::DevBoolean ttydebug;

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::Data Members

//	Device property data members
public:
	//	HostName:	hostname or ip address of controller
	string	hostName;
	//	PortNumber:	tcp port number of controller
	string	portNumber;
	//	ConnectType:	whenn connected via network, set to `net, when connected via usb, set to `usb`
	string	connectType;
	//	DeviceFile:	usb device file when connected via usb
	string	deviceFile;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	NewPort8742Ctrl(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	NewPort8742Ctrl(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	NewPort8742Ctrl(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~NewPort8742Ctrl() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : NewPort8742Ctrl::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : NewPort8742Ctrl::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Write related method
	 *	Description: write command to the controller
	 *
	 *	@param argin command to send
	 */
	virtual void write(Tango::DevString argin);
	virtual bool is_Write_allowed(const CORBA::Any &any);
	/**
	 *	Command WriteReadString related method
	 *	Description: write command to the controller an read reply as string
	 *
	 *	@param argin command to send
	 *	@returns reply we got
	 */
	virtual Tango::DevString write_read_string(Tango::DevString argin);
	virtual bool is_WriteReadString_allowed(const CORBA::Any &any);
	/**
	 *	Command WriteReadLong related method
	 *	Description: write command to the controller an read reply as Tango::DevLong
	 *
	 *	@param argin command to send
	 *	@returns reply we got
	 */
	virtual Tango::DevLong write_read_long(Tango::DevString argin);
	virtual bool is_WriteReadLong_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: This will reboot the controller. The connection will be lost afterwards,
	 *               so restart the server.
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : NewPort8742Ctrl::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(NewPort8742Ctrl::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::Additional Method prototypes
};

/*----- PROTECTED REGION ID(NewPort8742Ctrl::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::Additional Classes Definitions

}	//	End of namespace

#endif   //	NewPort8742Ctrl_H
