/*----- PROTECTED REGION ID(NewPort8742Ctrl.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        NewPort8742Ctrl.cpp
//
// description : C++ source for the NewPort8742Ctrl and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               NewPort8742Ctrl are implemented in this file.
//
// project :     NewPort8742Ctrl.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <NewPort8742Ctrl.h>
#include <NewPort8742CtrlClass.h>

/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl.cpp

/**
 *  NewPort8742Ctrl class description:
 *    Controller class for NewPort8742 piezo controller
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name     |  Method name
//================================================================
//  State            |  Inherited (no method)
//  Status           |  Inherited (no method)
//  Write            |  write
//  WriteReadString  |  write_read_string
//  WriteReadLong    |  write_read_long
//  Reset            |  reset
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace NewPort8742Ctrl_ns
{
/*----- PROTECTED REGION ID(NewPort8742Ctrl::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::NewPort8742Ctrl()
 *	Description : Constructors for a Tango device
 *                implementing the classNewPort8742Ctrl
 */
//--------------------------------------------------------
NewPort8742Ctrl::NewPort8742Ctrl(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::constructor_1
}
//--------------------------------------------------------
NewPort8742Ctrl::NewPort8742Ctrl(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::constructor_2
}
//--------------------------------------------------------
NewPort8742Ctrl::NewPort8742Ctrl(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void NewPort8742Ctrl::delete_device()
{
	DEBUG_STREAM << "NewPort8742Ctrl::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	delete ctrl;

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void NewPort8742Ctrl::init_device()
{
	DEBUG_STREAM << "NewPort8742Ctrl::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::init_device) ENABLED START -----*/
	if(::isatty(0))
	{
		ttydebug = true;
	}
	else
	{
		ttydebug = false;
	}
	try
	{
		if(connectType == "net")
		{
			ctrl = new NewPort8742(new TcpSocket(hostName.c_str(), portNumber.c_str(), 15));
		}
		else if(connectType == "usb")
		{	
			ctrl = new NewPort8742(new USBDevice(deviceFile.c_str()));
		}
		if(ttydebug)
		{
			ctrl->consoleDebug(true);
		}
	}
	catch(IpcException& e)
	{
		if(ttydebug) e.print();
		set_state(Tango::FAULT);
		set_status(e.what());
		return;
	}
	set_state(Tango::ON);		



	//	Initialize device

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::init_device
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void NewPort8742Ctrl::get_device_property()
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("HostName"));
	dev_prop.push_back(Tango::DbDatum("PortNumber"));
	dev_prop.push_back(Tango::DbDatum("ConnectType"));
	dev_prop.push_back(Tango::DbDatum("DeviceFile"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on NewPort8742CtrlClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		NewPort8742CtrlClass	*ds_class =
			(static_cast<NewPort8742CtrlClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize HostName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  hostName;
		else {
			//	Try to initialize HostName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  hostName;
		}
		//	And try to extract HostName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  hostName;

		//	Try to initialize PortNumber from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  portNumber;
		else {
			//	Try to initialize PortNumber from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  portNumber;
		}
		//	And try to extract PortNumber value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  portNumber;

		//	Try to initialize ConnectType from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  connectType;
		else {
			//	Try to initialize ConnectType from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  connectType;
		}
		//	And try to extract ConnectType value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  connectType;

		//	Try to initialize DeviceFile from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceFile;
		else {
			//	Try to initialize DeviceFile from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceFile;
		}
		//	And try to extract DeviceFile value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceFile;

	}

	/*----- PROTECTED REGION ID(NewPort8742Ctrl::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init
	if(connectType.size() == 0)
	{
		set_status("Property ConnectType not set");
		set_state(Tango::FAULT);
		return;
	}
	if(connectType != "usb" && connectType != "net")
	{
		set_status("Invalid value for property ConnectType");
		set_state(Tango::FAULT);
		return;
	}
	if(connectType == "usb")
	{
		if(deviceFile.size() == 0)
		{
			set_status("Property DeviceFile not set");
			set_state(Tango::FAULT);
			return;
		}
	}
	else if(connectType == "net")
	{
		if(hostName.size() == 0)
		{
			set_status("Property HostName not set");
			set_state(Tango::FAULT);
			return;
		}
		if(portNumber.size() == 0)
		{
			set_status("Property PortNumber not set");
			set_state(Tango::FAULT);
			return;
		}
	}

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void NewPort8742Ctrl::always_executed_hook()
{
	DEBUG_STREAM << "NewPort8742Ctrl::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void NewPort8742Ctrl::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "NewPort8742Ctrl::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void NewPort8742Ctrl::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Write related method
 *	Description: write command to the controller
 *
 *	@param argin command to send
 */
//--------------------------------------------------------
void NewPort8742Ctrl::write(Tango::DevString argin)
{
	DEBUG_STREAM << "NewPort8742Ctrl::Write()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::write) ENABLED START -----*/

	//	Add your own code
	try
	{
		ctrl->write(argin);
	}
	catch(IpcException& e)
	{
		if(ttydebug) e.print();
		Tango::Except::throw_exception("write error",
									   e.what(),
									   "NewPort8742Ctrl::write",
									   Tango::WARN);
	}
	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::write
}
//--------------------------------------------------------
/**
 *	Command WriteReadString related method
 *	Description: write command to the controller an read reply as string
 *
 *	@param argin command to send
 *	@returns reply we got
 */
//--------------------------------------------------------
Tango::DevString NewPort8742Ctrl::write_read_string(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "NewPort8742Ctrl::WriteReadString()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::write_read_string) ENABLED START -----*/

	//	Add your own code
	//	Add your own code
	//	Add your own code
	string reply;
	try
	{
		ctrl->writeRead(argin, reply);
		argout = CORBA::string_dup(reply.c_str());
	}
	catch(IpcException& e)
	{
		if(ttydebug) e.print();
		Tango::Except::throw_exception("write/read error",
									   e.what(),
									   "NewPort8742Ctrl::read_write",
									   Tango::WARN);
	}

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::write_read_string
	return argout;
}
//--------------------------------------------------------
/**
 *	Command WriteReadLong related method
 *	Description: write command to the controller an read reply as Tango::DevLong
 *
 *	@param argin command to send
 *	@returns reply we got
 */
//--------------------------------------------------------
Tango::DevLong NewPort8742Ctrl::write_read_long(Tango::DevString argin)
{
	Tango::DevLong argout;
	DEBUG_STREAM << "NewPort8742Ctrl::WriteReadLong()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::write_read_long) ENABLED START -----*/

	//	Add your own code
	try
	{
		ctrl->writeRead(argin, (int*) &argout);
	}
	catch(IpcException& e)
	{
		if(ttydebug) e.print();
		Tango::Except::throw_exception("write/read error",
									   e.what(),
									   "NewPort8742Ctrl::read_write_double",
									   Tango::WARN);
	}

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::write_read_long
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: This will reboot the controller. The connection will be lost afterwards,
 *               so restart the server.
 *
 */
//--------------------------------------------------------
void NewPort8742Ctrl::reset()
{
	DEBUG_STREAM << "NewPort8742Ctrl::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::reset) ENABLED START -----*/

	//	Add your own code
	try
	{
		set_state(Tango::FAULT);
		sleep(1);
		ctrl->write("RS");
		delete ctrl;
	}
	catch(IpcException& e)
	{
		if(ttydebug) e.print();
		Tango::Except::throw_exception("write error",
									   e.what(),
									   "NewPort8742Ctrl::reset",
									   Tango::WARN);
	}
	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::reset
}
//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void NewPort8742Ctrl::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::add_dynamic_commands
}

/*----- PROTECTED REGION ID(NewPort8742Ctrl::namespace_ending) ENABLED START -----*/

	//	Additional Methods

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::namespace_ending
} //	namespace
