/*----- PROTECTED REGION ID(NewPort8742CtrlStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        NewPort8742CtrlStateMachine.cpp
//
// description : C++ source for the «name» and its alowed
//               methods for commands and attributes
//
// project :     NewPort8742Ctrl.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <NewPort8742Ctrl.h>
#include <NewPort8742CtrlClass.h>

/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::NewPort8742CtrlStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================
//  ON      |  everything ok
//  FAULT   |  something went wrong, check status


namespace NewPort8742Ctrl_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::is_Write_allowed()
 *	Description : Execution allowed for Write attribute
 */
//--------------------------------------------------------
bool NewPort8742Ctrl::is_Write_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::FAULT)
	{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::WriteStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::WriteStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::is_WriteReadString_allowed()
 *	Description : Execution allowed for WriteReadString attribute
 */
//--------------------------------------------------------
bool NewPort8742Ctrl::is_WriteReadString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::FAULT)
	{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::WriteReadStringStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::WriteReadStringStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::is_WriteReadLong_allowed()
 *	Description : Execution allowed for WriteReadLong attribute
 */
//--------------------------------------------------------
bool NewPort8742Ctrl::is_WriteReadLong_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::FAULT)
	{
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::WriteReadLongStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::WriteReadLongStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : NewPort8742Ctrl::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool NewPort8742Ctrl::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(NewPort8742Ctrl::ResetStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::ResetStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(NewPort8742Ctrl::NewPort8742CtrlStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	NewPort8742Ctrl::NewPort8742CtrlStateAllowed.AdditionalMethods

}	//	End of namespace
