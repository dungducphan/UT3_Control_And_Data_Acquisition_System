/*----- PROTECTED REGION ID(NewPort8742CtrlClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        NewPort8742CtrlClass.h
//
// description : Include for the NewPort8742CtrlClass root class.
//               This class is the singleton class for.
//               the NewPort8742Ctrl device class..
//               It contains all properties and methods which the .
//               NewPort8742Ctrl requires only once e.g. the commands.
//
// project :     NewPort8742Ctrl.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef NEWPORT8742CTRLCLASS_H
#define NEWPORT8742CTRLCLASS_H

#include <tango.h>
#include <NewPort8742Ctrl.h>

/*----- PROTECTED REGION END -----*/	//	NewPort8742CtrlClass.h


namespace NewPort8742Ctrl_ns
{
/*----- PROTECTED REGION ID(NewPort8742CtrlClass::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742CtrlClass::classes for dynamic creation

//=========================================
//	Define classes for commands
//=========================================
//	Command Write class definition
class WriteClass : public Tango::Command
{
public:
	WriteClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<NewPort8742Ctrl *>(dev))->is_Write_allowed(any);}
};

//	Command WriteReadString class definition
class WriteReadStringClass : public Tango::Command
{
public:
	WriteReadStringClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteReadStringClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteReadStringClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<NewPort8742Ctrl *>(dev))->is_WriteReadString_allowed(any);}
};

//	Command WriteReadLong class definition
class WriteReadLongClass : public Tango::Command
{
public:
	WriteReadLongClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteReadLongClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteReadLongClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<NewPort8742Ctrl *>(dev))->is_WriteReadLong_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<NewPort8742Ctrl *>(dev))->is_Reset_allowed(any);}
};


/**
 *	The NewPort8742CtrlClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  NewPort8742CtrlClass : public Tango::DeviceClass
#else
class NewPort8742CtrlClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(NewPort8742CtrlClass::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	NewPort8742CtrlClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static NewPort8742CtrlClass *init(const char *);
		static NewPort8742CtrlClass *instance();
		~NewPort8742CtrlClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		NewPort8742CtrlClass(string &);
		static NewPort8742CtrlClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	NewPort8742Ctrl_H
