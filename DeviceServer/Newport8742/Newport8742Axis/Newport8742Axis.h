/*----- PROTECTED REGION ID(Newport8742Axis.h) ENABLED START -----*/
//=============================================================================
//
// file :        Newport8742Axis.h
//
// description : Include for the Newport8742Axis class.
//
// project :     .
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef NEWPORT8742AXIS_H
#define NEWPORT8742AXIS_H


#include <tango.h>
class Newport8742AxisRestoreThread;
class Newport8742AxisMoveThread;

/*----- PROTECTED REGION END -----*/	//	Newport8742Axis.h

/**
 *  Newport8742Axis class description:
 *    Axis class for motors connected to NewPort8742 controller
 */

namespace Newport8742Axis_ns
{
/*----- PROTECTED REGION ID(Newport8742Axis::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::Additional Class Declarations

class Newport8742Axis : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Newport8742Axis::Data Members) ENABLED START -----*/
private:
	Tango::DeviceProxy* ctrl;
	Tango::AttributeProxy* storedPositionProxy;
	Newport8742AxisRestoreThread* restore_thread;
	Newport8742AxisMoveThread* move_thread;

	//		Add your own data members

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::Data Members

//	Device property data members
public:
	//	NewPortCtrlDevice:	
	string	newPortCtrlDevice;
	//	AxisNumber:	Number of axis (1-4)
	Tango::DevShort	axisNumber;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Conversion_read;
	Tango::DevDouble	*attr_Position_read;
	Tango::DevDouble	*attr_UnitLimitMin_read;
	Tango::DevDouble	*attr_UnitLimitMax_read;
	Tango::DevShort	*attr_MotorType_read;
	Tango::DevLong	*attr_Speed_read;
	Tango::DevLong	*attr_Acceleration_read;
	Tango::DevLong	*attr_StoredPosition_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Newport8742Axis(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Newport8742Axis(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Newport8742Axis(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Newport8742Axis() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Newport8742Axis::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Newport8742Axis::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Conversion related methods
 *	Description: conversion factor for steps to units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Conversion(Tango::Attribute &attr);
	virtual void write_Conversion(Tango::WAttribute &attr);
	virtual bool is_Conversion_allowed(Tango::AttReqType type);
/**
 *	Attribute Position related methods
 *	Description: The current or target position in units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute UnitLimitMin related methods
 *	Description: Minimum position limit. If not set, will default to -1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_UnitLimitMin(Tango::Attribute &attr);
	virtual void write_UnitLimitMin(Tango::WAttribute &attr);
	virtual bool is_UnitLimitMin_allowed(Tango::AttReqType type);
/**
 *	Attribute UnitLimitMax related methods
 *	Description: Maximum position limit. If not set, will default to 1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_UnitLimitMax(Tango::Attribute &attr);
	virtual void write_UnitLimitMax(Tango::WAttribute &attr);
	virtual bool is_UnitLimitMax_allowed(Tango::AttReqType type);
/**
 *	Attribute MotorType related methods
 *	Description: The type of the connected motor.
 *               
 *               0: no motor connected
 *               1: motor type unknown
 *               2: tiny motor
 *               3: standard motor
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_MotorType(Tango::Attribute &attr);
	virtual bool is_MotorType_allowed(Tango::AttReqType type);
/**
 *	Attribute Speed related methods
 *	Description: The axis velocity in steps/sec , min 0, max 2000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Speed(Tango::Attribute &attr);
	virtual void write_Speed(Tango::WAttribute &attr);
	virtual bool is_Speed_allowed(Tango::AttReqType type);
/**
 *	Attribute Acceleration related methods
 *	Description: The axis acceleraion in steps/sec2, min 1, max 200000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute StoredPosition related methods
 *	Description: Position in steps. This attribute is memorized an updated after every
 *               move. The value is used to recalibrate the position value (command 'DH')at server start
 *               in case the controller was switched off. Never edit this manually. 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_StoredPosition(Tango::Attribute &attr);
	virtual void write_StoredPosition(Tango::WAttribute &attr);
	virtual bool is_StoredPosition_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Newport8742Axis::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
	 *
	 *	@returns Device state
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command StopMove related method
	 *	Description: Stop movement on this axis
	 *
	 */
	virtual void stop_move();
	virtual bool is_StopMove_allowed(const CORBA::Any &any);
	/**
	 *	Command Calibrate related method
	 *	Description: Define the current position as position <argin>
	 *
	 *	@param argin position value to be defined as current position
	 */
	virtual void calibrate(Tango::DevDouble argin);
	virtual bool is_Calibrate_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Newport8742Axis::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Newport8742Axis::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
	//
private:
	void readLong(stringstream& cmd, Tango::DevLong* val);
	void writeCmd(stringstream& cmd);
	void storedPosition(Tango::DevLong pos);
	void restorePosition();
	Tango::DevLong wasAttributeWritten(const char* attr_name, Tango::DbData* db_data = NULL);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Newport8742Axis::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::Additional Classes Definitions

}	//	End of namespace

#endif   //	Newport8742Axis_H
