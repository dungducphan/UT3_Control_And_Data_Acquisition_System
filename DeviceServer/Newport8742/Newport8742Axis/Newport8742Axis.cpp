/*----- PROTECTED REGION ID(Newport8742Axis.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Newport8742Axis.cpp
//
// description : C++ source for the Newport8742Axis and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Newport8742Axis are implemented in this file.
//
// project :     .
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Newport8742Axis.h>
#include <Newport8742AxisClass.h>
#include <Newport8742AxisMoveThread.h>

/*----- PROTECTED REGION END -----*/	//	Newport8742Axis.cpp

/**
 *  Newport8742Axis class description:
 *    Axis class for motors connected to NewPort8742 controller
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  Inherited (no method)
//  StopMove      |  stop_move
//  Calibrate     |  calibrate
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Conversion      |  Tango::DevDouble	Scalar
//  Position        |  Tango::DevDouble	Scalar
//  UnitLimitMin    |  Tango::DevDouble	Scalar
//  UnitLimitMax    |  Tango::DevDouble	Scalar
//  MotorType       |  Tango::DevShort	Scalar
//  Speed           |  Tango::DevLong	Scalar
//  Acceleration    |  Tango::DevLong	Scalar
//  StoredPosition  |  Tango::DevLong	Scalar
//================================================================

namespace Newport8742Axis_ns
{
/*----- PROTECTED REGION ID(Newport8742Axis::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::Newport8742Axis()
 *	Description : Constructors for a Tango device
 *                implementing the classNewport8742Axis
 */
//--------------------------------------------------------
Newport8742Axis::Newport8742Axis(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Newport8742Axis::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::constructor_1
}
//--------------------------------------------------------
Newport8742Axis::Newport8742Axis(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Newport8742Axis::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::constructor_2
}
//--------------------------------------------------------
Newport8742Axis::Newport8742Axis(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Newport8742Axis::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Newport8742Axis::delete_device()
{
	DEBUG_STREAM << "Newport8742Axis::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	delete ctrl;
	if(storedPositionProxy)
	{
		delete storedPositionProxy;
	}
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::delete_device
	delete[] attr_Conversion_read;
	delete[] attr_Position_read;
	delete[] attr_UnitLimitMin_read;
	delete[] attr_UnitLimitMax_read;
	delete[] attr_MotorType_read;
	delete[] attr_Speed_read;
	delete[] attr_Acceleration_read;
	delete[] attr_StoredPosition_read;
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Newport8742Axis::init_device()
{
	DEBUG_STREAM << "Newport8742Axis::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Conversion_read = new Tango::DevDouble[1];
	attr_Position_read = new Tango::DevDouble[1];
	attr_UnitLimitMin_read = new Tango::DevDouble[1];
	attr_UnitLimitMax_read = new Tango::DevDouble[1];
	attr_MotorType_read = new Tango::DevShort[1];
	attr_Speed_read = new Tango::DevLong[1];
	attr_Acceleration_read = new Tango::DevLong[1];
	attr_StoredPosition_read = new Tango::DevLong[1];
	/*----- PROTECTED REGION ID(Newport8742Axis::init_device) ENABLED START -----*/

	//	Initialize device
	try
	{
		ctrl = new Tango::DeviceProxy(newPortCtrlDevice);
		set_state(ctrl->state());
		set_status(ctrl->status());
	}
	catch(Tango::DevFailed e)
	{
		string tmp(e.errors[0].desc);
		set_status(tmp);
		set_state(Tango::FAULT);
		return;
	}
	if(get_state() == Tango::FAULT)
	{
		// no use in going on
		return;
	}
	// avoid this being zero when never set.
	if(!wasAttributeWritten("Conversion"))
	{
		*attr_Conversion_read = 1;
	}
	// set to default when never set
	if(!wasAttributeWritten("UnitLimitMin"))
	{
		*attr_UnitLimitMin_read = 1;
	}
	if(!wasAttributeWritten("UnitLimitMax"))
	{
		*attr_UnitLimitMax_read = -1;
	}
	storedPositionProxy = 0;
	set_state(Tango::INIT);
	restorePosition();
	set_state(Tango::ON);
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Newport8742Axis::get_device_property()
{
	/*----- PROTECTED REGION ID(Newport8742Axis::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("NewPortCtrlDevice"));
	dev_prop.push_back(Tango::DbDatum("AxisNumber"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on Newport8742AxisClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		Newport8742AxisClass	*ds_class =
			(static_cast<Newport8742AxisClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize NewPortCtrlDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  newPortCtrlDevice;
		else {
			//	Try to initialize NewPortCtrlDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  newPortCtrlDevice;
		}
		//	And try to extract NewPortCtrlDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  newPortCtrlDevice;

		//	Try to initialize AxisNumber from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  axisNumber;
		else {
			//	Try to initialize AxisNumber from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  axisNumber;
		}
		//	And try to extract AxisNumber value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  axisNumber;

	}

	/*----- PROTECTED REGION ID(Newport8742Axis::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Newport8742Axis::always_executed_hook()
{
	DEBUG_STREAM << "Newport8742Axis::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Newport8742Axis::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Newport8742Axis::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Newport8742Axis::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Newport8742Axis::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Conversion related method
 *	Description: conversion factor for steps to units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_Conversion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_Conversion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_Conversion) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Conversion_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_Conversion
}
//--------------------------------------------------------
/**
 *	Write attribute Conversion related method
 *	Description: conversion factor for steps to units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_Conversion(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_Conversion(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_Conversion) ENABLED START -----*/
	*attr_Conversion_read = w_val;
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_Conversion
}
//--------------------------------------------------------
/**
 *	Read attribute Position related method
 *	Description: The current or target position in units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_Position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_Position) ENABLED START -----*/
	stringstream cmd;
	Tango::DevLong pos;
	cmd << axisNumber << "TP?";
	readLong(cmd, &pos);
	*attr_Position_read = pos / *attr_Conversion_read;
	//	Set the attribute value
	attr.set_value(attr_Position_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_Position
}
//--------------------------------------------------------
/**
 *	Write attribute Position related method
 *	Description: The current or target position in units
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_Position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_Position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_Position) ENABLED START -----*/
	
	string msg("");
	if(*attr_UnitLimitMin_read != 0 && *attr_UnitLimitMax_read != 0)
	{
		if(w_val > *attr_UnitLimitMax_read)
		{
			msg = "UnitLimitMax exceeded";
		}
		else if(w_val < *attr_UnitLimitMin_read)
		{
			msg = "UnitLimitMin exceeded";
		}
	}
	if(msg != "")
	{
		Tango::Except::throw_exception( "Read error",
										msg,
										"Newport8742Axis::write_Position",
										Tango::WARN);
	}
	w_val *= *attr_Conversion_read;
	stringstream cmd;
	cmd << axisNumber << "PA" << w_val;
	writeCmd(cmd);
	string attname(name());
	attname += "/StoredPosition";
	move_thread = new Newport8742AxisMoveThread(newPortCtrlDevice.c_str(), attname.c_str(), axisNumber);
		
	
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_Position
}
//--------------------------------------------------------
/**
 *	Read attribute UnitLimitMin related method
 *	Description: Minimum position limit. If not set, will default to -1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_UnitLimitMin(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_UnitLimitMin(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_UnitLimitMin) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_UnitLimitMin_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_UnitLimitMin
}
//--------------------------------------------------------
/**
 *	Write attribute UnitLimitMin related method
 *	Description: Minimum position limit. If not set, will default to -1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_UnitLimitMin(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_UnitLimitMin(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_UnitLimitMin) ENABLED START -----*/
	*attr_UnitLimitMin_read = w_val;
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_UnitLimitMin
}
//--------------------------------------------------------
/**
 *	Read attribute UnitLimitMax related method
 *	Description: Maximum position limit. If not set, will default to 1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_UnitLimitMax(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_UnitLimitMax(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_UnitLimitMax) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_UnitLimitMax_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_UnitLimitMax
}
//--------------------------------------------------------
/**
 *	Write attribute UnitLimitMax related method
 *	Description: Maximum position limit. If not set, will default to 1.
 *               
 *               When both min and max are set to 0, the limit will be ignored.
 *               
 *               The motors do not have end switches and the controller does not stop
 *               generating pulses when the wall is hit. If this happens, your position
 *               is lost. So make sure you set the limits properly.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_UnitLimitMax(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_UnitLimitMax(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_UnitLimitMax) ENABLED START -----*/
	*attr_UnitLimitMax_read = w_val;
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_UnitLimitMax
}
//--------------------------------------------------------
/**
 *	Read attribute MotorType related method
 *	Description: The type of the connected motor.
 *               
 *               0: no motor connected
 *               1: motor type unknown
 *               2: tiny motor
 *               3: standard motor
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_MotorType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_MotorType(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_MotorType) ENABLED START -----*/
	stringstream cmd;
	Tango::DevLong mtype;
	cmd << axisNumber << "QM?";
	readLong(cmd, &mtype);
	*attr_MotorType_read = (Tango::DevShort) mtype;
	//	Set the attribute value
	attr.set_value(attr_MotorType_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_MotorType
}
//--------------------------------------------------------
/**
 *	Read attribute Speed related method
 *	Description: The axis velocity in steps/sec , min 0, max 2000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_Speed) ENABLED START -----*/
	
	stringstream cmd;
	cmd << axisNumber << "VA?";
	readLong(cmd, attr_Speed_read);
		
	

	//	Set the attribute value
	attr.set_value(attr_Speed_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_Speed
}
//--------------------------------------------------------
/**
 *	Write attribute Speed related method
 *	Description: The axis velocity in steps/sec , min 0, max 2000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_Speed(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_Speed(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_Speed) ENABLED START -----*/
	stringstream cmd;
	cmd << axisNumber << "VA" << (Tango::DevLong) w_val;
	writeCmd(cmd);
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_Speed
}
//--------------------------------------------------------
/**
 *	Read attribute Acceleration related method
 *	Description: The axis acceleraion in steps/sec2, min 1, max 200000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_Acceleration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_Acceleration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_Acceleration) ENABLED START -----*/
	stringstream cmd;
	cmd << axisNumber << "AC?";
	readLong(cmd, attr_Acceleration_read);


	//	Set the attribute value
	attr.set_value(attr_Acceleration_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_Acceleration
}
//--------------------------------------------------------
/**
 *	Write attribute Acceleration related method
 *	Description: The axis acceleraion in steps/sec2, min 1, max 200000
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_Acceleration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_Acceleration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_Acceleration) ENABLED START -----*/
	stringstream cmd;
	cmd << axisNumber << "AC" << (Tango::DevLong) w_val;
	writeCmd(cmd);
	

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_Acceleration
}
//--------------------------------------------------------
/**
 *	Read attribute StoredPosition related method
 *	Description: Position in steps. This attribute is memorized an updated after every
 *               move. The value is used to recalibrate the position value (command 'DH')at server start
 *               in case the controller was switched off. Never edit this manually. 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::read_StoredPosition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::read_StoredPosition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::read_StoredPosition) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_StoredPosition_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::read_StoredPosition
}
//--------------------------------------------------------
/**
 *	Write attribute StoredPosition related method
 *	Description: Position in steps. This attribute is memorized an updated after every
 *               move. The value is used to recalibrate the position value (command 'DH')at server start
 *               in case the controller was switched off. Never edit this manually. 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Newport8742Axis::write_StoredPosition(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Newport8742Axis::write_StoredPosition(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Newport8742Axis::write_StoredPosition) ENABLED START -----*/
	*attr_StoredPosition_read = w_val;
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::write_StoredPosition
}

//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Newport8742Axis::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Newport8742Axis::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState Newport8742Axis::dev_state()
{
	DEBUG_STREAM << "Newport8742Axis::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::dev_state) ENABLED START -----*/

	Tango::DevState	argout = DeviceImpl::dev_state();
		
		//	Add your own state management
		if( (argout = ctrl->state()) == Tango::FAULT)
		{
			set_status(ctrl->status());
		}
		else
		{
			Tango::DevLong axis_state;
			stringstream cmd;
			cmd << axisNumber << "MD?";
			readLong(cmd, &axis_state);
			if(axis_state == 0)
			{
				argout = Tango::MOVING;
			}
			else
			{
				argout = Tango::ON;
			}
		}

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command StopMove related method
 *	Description: Stop movement on this axis
 *
 */
//--------------------------------------------------------
void Newport8742Axis::stop_move()
{
	DEBUG_STREAM << "Newport8742Axis::StopMove()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::stop_move) ENABLED START -----*/

	//	Add your own code
	stringstream cmd;
	cmd << axisNumber << "ST";
	writeCmd(cmd);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::stop_move
}
//--------------------------------------------------------
/**
 *	Command Calibrate related method
 *	Description: Define the current position as position <argin>
 *
 *	@param argin position value to be defined as current position
 */
//--------------------------------------------------------
void Newport8742Axis::calibrate(Tango::DevDouble argin)
{
	DEBUG_STREAM << "Newport8742Axis::Calibrate()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Newport8742Axis::calibrate) ENABLED START -----*/

	//	Add your own code
	stringstream cmd;
	cmd << axisNumber << "DH" << (Tango::DevLong) argin * *attr_Conversion_read;
	writeCmd(cmd);
	storedPosition((Tango::DevLong) argin * *attr_Conversion_read);

	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::calibrate
}
//--------------------------------------------------------
/**
 *	Method      : Newport8742Axis::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Newport8742Axis::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Newport8742Axis::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Newport8742Axis::namespace_ending) ENABLED START -----*/

	//	Additional Methods
	//
	//
	//
	//
	//
	//
// this will be called when a movement is finsished, the current
// position value in steps will be written to memorized attribute 
// StoredPosition
void Newport8742Axis::storedPosition(Tango::DevLong pos)
{
	try
	{
		if(!storedPositionProxy)
		{
			string attr_name(name());
			attr_name += "/StoredPosition";
			storedPositionProxy = new Tango::AttributeProxy(attr_name);
		}
		Tango::DeviceAttribute da("StoredPosition", pos);
		storedPositionProxy->write(da);
	}
	catch(Tango::DevFailed &e)
	{
		string tmp(e.errors[0].desc);
		Tango::Except::throw_exception( "Write error",
										tmp,
										"Newport8742Axis::storedPosition",
										Tango::WARN);
	}

}
// write command cmd to controller
// no reply to be exspected, but the controller
// might throw an exception
void Newport8742Axis::writeCmd(stringstream& cmd)
{
	try
	{
		Tango::DeviceData devin;
		Tango::DevString msg = (char*) cmd.str().c_str();
		devin << msg;
		ctrl->command_inout("Write", devin);
	}
	catch(Tango::DevFailed &e)
	{
		string tmp(e.errors[0].desc);
		Tango::Except::throw_exception( "Read error",
										tmp,
										"Newport8742Axis::writeCmd",
										Tango::WARN);
	}

}

// write command cmd to controller
// the reply value will be stored in val
// controller might throw an exception
void Newport8742Axis::readLong(stringstream& cmd, Tango::DevLong* val)
{
	try
	{
		Tango::DeviceData devin, devout;
		Tango::DevString msg = (char*) cmd.str().c_str();
		devin << msg;
		devout = ctrl->command_inout("WriteReadLong", devin);
		devout >> *val;
	}
	catch(Tango::DevFailed &e)
	{
		string tmp(e.errors[0].desc);
		Tango::Except::throw_exception( "Read error",
										tmp,
										"Newport8742Axis::read_Double",
										Tango::WARN);
	}

}
// if the controller was switched off all positions will be at 0
// in this case set the position to the value stored in attribute StoredPosition
void Newport8742Axis::restorePosition()
{
	try
	{
		Tango::DevLong 		storedPos, currentPos, index;
		Tango::DbData 		db_data;
		// get stored Position
		if(!(index = wasAttributeWritten("StoredPosition", &db_data)))
		{
			// nothing was stored, get out
			*attr_StoredPosition_read = 0;
			return;
		}
		db_data[index] >> storedPos;
		stringstream cmd;
		// get current position
		cmd << axisNumber << "TP?";
		readLong(cmd, &currentPos);
		if(storedPos != currentPos && currentPos == 0)
		{
			
			cmd.str("");
			cmd << axisNumber << "DH" << storedPos;
			writeCmd(cmd);
		}
	}
	catch(Tango::DevFailed &e)
	{
		string tmp(e.errors[0].desc);
		Tango::Except::throw_exception( "Read error",
										tmp,
										"Newport8742Axis::restorePosition",
										Tango::WARN);
	}
}


// find out whether there are data for a memorized attribute in the database
//
// in - attr_name: the attribute name
// in - db_data:   address of Tango::DbData, will contain the data value
//                 if method returns with > 0
//
// out - true:     0, if no value for the memorized attribute was found
//       		   otherwise the index in db_data where the attribute value is stored
Tango::DevLong Newport8742Axis::wasAttributeWritten(const char* attr_name, Tango::DbData* db_data)
{
	Tango::DevLong retval 		    = 0;
	Tango::DevBoolean deleteData 	= false;

	// no db_data were given, the caller probably only wants
	// to know wether the attribute was written at least once
	// we need them anyway, so let's create them
	if(!db_data)
	{
		db_data = new Tango::DbData;
		deleteData = true;
	}
	try
	{
		if (Tango::Util::instance()->_UseDb == true)
		{
			db_data->push_back(Tango::DbDatum(attr_name));
			get_db_device()->get_attribute_property(*db_data);
			// db_data will contain at least one element (the one we put in with push_back),
			// but not more if there were no attribute properties found in the database
			if(db_data->size() > 1)
			{
				// now let's check whether there is an attribute property
				// named '__value'. If yes, this is the attribute property
				// containing the memorized attribute value
				for(size_t i = 0; i < db_data->size(); i++)
				{
					if((*db_data)[i].name == "__value")
					{
						retval = i;
					}
				}
			}
		}
	}
	catch(Tango::DevFailed &e)
	{
		string tmp(e.errors[0].desc);
		Tango::Except::throw_exception( "Read error",
										tmp,
										"Newport8742Axis::wasAttributeWritten",
										Tango::WARN);
	}
	if(deleteData)
	{
		delete db_data;
		db_data = NULL;
	}
	return retval;
}




	/*----- PROTECTED REGION END -----*/	//	Newport8742Axis::namespace_ending
} //	namespace
