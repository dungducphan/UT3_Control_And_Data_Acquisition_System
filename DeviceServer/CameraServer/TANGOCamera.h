/*----- PROTECTED REGION ID(TANGOCamera.h) ENABLED START -----*/
//=============================================================================
//
// file :        TANGOCamera.h
//
// description : Include file for the TANGOCamera class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TANGOCamera_H
#define TANGOCamera_H

#include <tango.h>
#include <CameraDriverFactory.h>


/*----- PROTECTED REGION END -----*/	//	TANGOCamera.h

/**
 *  TANGOCamera class description:
 *    
 */

namespace TANGOCamera_ns
{
/*----- PROTECTED REGION ID(TANGOCamera::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Class Declarations

class TANGOCamera : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TANGOCamera::Data Members) ENABLED START -----*/

//	Add your own data members

    CameraDriver* cameraDriverPtr;

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Data Members

//	Device property data members
public:
	//	serialNumber:	
	string	serialNumber;
	//	vendor:	
	string	vendor;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TANGOCamera(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TANGOCamera(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TANGOCamera(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TANGOCamera() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TANGOCamera::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute dynImage related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevUShort
	 *	Attr type:	Image max = 3840 x 2160
	 */
	virtual void read_dynImage(Tango::Attribute &attr);
	virtual bool is_dynImage_allowed(Tango::AttReqType type);
	void add_dynImage_dynamic_attribute(string attname, Tango::DevUShort *ptr=NULL);
	void remove_dynImage_dynamic_attribute(string attname, bool free_it=true);
	Tango::DevUShort *get_dynImage_data_ptr(string &name);
	map<string,Tango::DevUShort *>	   dynImage_data;

	//--------------------------------------------------------
	/**
	 *	Method      : TANGOCamera::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command StartAcquisition related method
	 *	Description: Start image acquisition
	 *
	 */
	virtual void start_acquisition();
	virtual bool is_StartAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command StopAcquisition related method
	 *	Description: Stop image acquisition
	 *
	 */
	virtual void stop_acquisition();
	virtual bool is_StopAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command ManualTrigger related method
	 *	Description: Issue manual trigger
	 *
	 */
	virtual void manual_trigger();
	virtual bool is_ManualTrigger_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureFreeRunMode related method
	 *	Description: 
	 *
	 */
	virtual void configure_free_run_mode();
	virtual bool is_ConfigureFreeRunMode_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureShotMode related method
	 *	Description: 
	 *
	 */
	virtual void configure_shot_mode();
	virtual bool is_ConfigureShotMode_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureManualTriggerMode related method
	 *	Description: 
	 *
	 */
	virtual void configure_manual_trigger_mode();
	virtual bool is_ConfigureManualTriggerMode_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : TANGOCamera::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TANGOCamera::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TANGOCamera::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	TANGOCamera::Additional Classes Definitions

}	//	End of namespace

#endif   //	TANGOCamera_H
